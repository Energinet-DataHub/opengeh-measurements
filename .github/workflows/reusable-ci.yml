name: Reusable CI

# The concept of `core` must be removed prior to moving these workflows and
# actions to a public repository. The `core` concept is specific to the
# Measurements project and is used to group packages that are released together.

on:
  workflow_call:
    inputs:
      packages_directory:
        type: string
        description: |
          Directory to search for python packages in. This recursively searches
          for directories containing a pyproject.toml file. All directories
          discovered are considered packages. Any package with changes will
          be tested, and given successful tests, a prerelease will be created
          with under the tag "<package_name>_<pull_request_number>".
          Defaults to workspace root.
        required: true
        default: ${{ github.workspace }}
      core_regex:
        type: string
        description: |
          List of package names, separated by '|', that should be released
          together as `core_<PR/latest>`.
          Non-core packages are released as `<package_name>_<PR/latest>`.
        required: false
        default: ""
    secrets:
      dh3serviceaccount_privatekey:
        required: true
        description: Used in ci_base job to authenticate with the DataHub3 service account

env:
  CORE_PREFIX: core
  NONCORE_PREFIX: bundle

permissions:
  contents: write
  checks: write
  pull-requests: write

jobs:
  #
  # License and Markdown Check
  #
  ci_base:
    uses: Energinet-DataHub/.github/.github/workflows/ci-base.yml@v14
    with:
      skip_license_check: true
    secrets:
      dh3serviceaccount_privatekey: ${{ secrets.dh3serviceaccount_privatekey }}

  #
  # Build Package Matrix
  #
  ci_matrix:
    name: Build Package Matrix
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.package_matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Discover Pyproject
        uses: ./.github/actions/discover-pyproject
        id: package_matrix
        with:
          path: ${{ inputs.packages_directory }}

  #
  # Test Packages
  #
  ci_test:
    name: Test Packages
    runs-on: ubuntu-24.04
    needs: ci_matrix
    strategy:
      matrix:
        inputs: ${{ fromJson(needs.ci_matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install asdf & tools
        uses: asdf-vm/actions/install@v3

      - name: Check if ${{ matrix.inputs.name }} has changed
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            is_changed:
              - ${{ matrix.inputs.path }}/**

      - name: Test ${{ matrix.inputs.name }}
        uses: ./.github/actions/uvtest
        if: ${{ steps.changes.outputs.is_changed == 'true' }}
        with:
          name: ${{ matrix.inputs.name }}
          path: ${{ matrix.inputs.path }}
          pytest_addopts: --ignore=tests/container_tests

      - name: Upload artifacts for ${{ matrix.inputs.name }}
        uses: ./.github/actions/upload-python-release-artifacts
        if: ${{ steps.changes.outputs.is_changed == 'true' }}
        with:
          name: ${{ matrix.inputs.name }}
          path: ${{ matrix.inputs.path }}
          core_regex: ${{ inputs.core_regex }}
          core_prefix: ${{ env.CORE_PREFIX }}
          noncore_prefix: ${{ env.NONCORE_PREFIX }}

  #
  # Prepare Release Matrix
  #
  ci_prepare_prerelease:
    name: Prepare prerelease
    runs-on: ubuntu-24.04
    needs: ci_test
    outputs:
      matrix: ${{ steps.create_matrix.outputs.matrix }}
      any_artifact: ${{ steps.list_artifacts.outputs.any_artifact }}
    steps:
      - name: Download Core Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ env.CORE_PREFIX }}-*
          path: ${{ github.workspace }}/dist/${{ env.CORE_PREFIX }}/
          merge-multiple: true

      - name: Download Bundle Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ env.NONCORE_PREFIX }}-*
          path: ${{ github.workspace }}/dist/
          merge-multiple: true

      - name: List Artifacts Contents
        id: list_artifacts
        run: |
          if [ -d "${{ github.workspace }}/dist" ]; then
              ls -alR "${{ github.workspace }}/dist"
              echo "any_artifact=true" >> $GITHUB_OUTPUT
          else
              echo "No artifacts found"
              echo "any_artifact=false" >> $GITHUB_OUTPUT
          fi

      - name: Create release matrix
        shell: python
        if: ${{ steps.list_artifacts.outputs.any_artifact == 'true' }}
        id: create_matrix
        run: |
          from pathlib import Path
          import json
          import os
          artifacts = []
          for p in Path("${{ github.workspace }}/dist").iterdir():
              if p.is_dir():
                  artifacts.append({"name": p.name, "path": str(p)})
          print(json.dumps({"inputs": artifacts}, indent=2))
          include_statement = json.dumps({"inputs": artifacts})
          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              print(f"matrix={include_statement}", file=fh)

  ci_create_prerelease:
    name: Create prerelease
    runs-on: ubuntu-24.04
    needs: ci_prepare_prerelease
    if: ${{ needs.ci_prepare_prerelease.outputs.any_artifact == 'true' }}
    strategy:
      matrix: ${{ fromJson(needs.ci_prepare_prerelease.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Core Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ env.CORE_PREFIX }}-*
          path: ${{ github.workspace }}/dist/${{ env.CORE_PREFIX }}/
          merge-multiple: true

      - name: Download Bundle Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ env.NONCORE_PREFIX }}-*
          path: ${{ github.workspace }}/dist/
          merge-multiple: true

      - name: Create prerelease for ${{ matrix.inputs.name }}
        uses: ./.github/actions/create-prerelease
        with:
          name: ${{ matrix.inputs.name }}
          path: ${{ matrix.inputs.path }}
          issue-number: ${{ github.event.number }}
