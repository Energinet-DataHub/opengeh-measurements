name: Reusable CI

# The concept of `core` must be removed prior to moving these workflows and
# actions to a public repository. The `core` concept is specific to the
# Measurements project and is used to group packages that are released together.

on:
  workflow_call:
    inputs:
      packages_directory:
        type: string
        description: |
          Directory to search for python packages in. This recursively searches
          for directories containing a pyproject.toml file. All directories
          discovered are considered packages. Any package with changes will
          be tested, and given successful tests, a prerelease will be created
          with under the tag "<package_name>_<pull_request_number>".
          Defaults to workspace root.
        required: true
        default: ${{ github.workspace }}
      pytest_addopts:
        type: string
        description: |
          Additional arguments to pass to pytest. This is useful for passing
          arguments to pytest that are not supported by the uvtest action.
          Any paths should be considered relative to the package directory.
        required: false
        default: ""
    secrets:
      dh3serviceaccount_privatekey:
        required: true
        description: Used in ci_base job to authenticate with the DataHub3 service account

env:
  CORE_PREFIX: core
  NONCORE_PREFIX: bundle

permissions:
  contents: write
  checks: write
  pull-requests: write

jobs:
  #
  # License and Markdown Check
  #
  ci_base:
    uses: Energinet-DataHub/.github/.github/workflows/ci-base.yml@v14
    with:
      skip_license_check: true
    secrets:
      dh3serviceaccount_privatekey: ${{ secrets.dh3serviceaccount_privatekey }}

  #
  # Build Package Matrix
  #
  ci_matrix:
    name: Build Package Matrix
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.package_matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Discover Pyproject
        uses: ./.github/actions/discover-pyproject
        id: package_matrix
        with:
          path: ${{ inputs.packages_directory }}

  #
  # Test Packages
  #
  ci_test:
    name: Test Packages
    runs-on: ubuntu-24.04
    needs: ci_matrix
    strategy:
      matrix:
        inputs: ${{ fromJson(needs.ci_matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if ${{ matrix.inputs.name }} has changed
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            is_changed:
              - ${{ matrix.inputs.path }}/**

      - name: Setup asdf
        uses: asdf-vm/actions/setup@v3

      - name: Restore asdf cache
        uses: actions/cache/restore@v4
        id: cache-asdf-restore
        with:
          path: /home/runner/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('**/.tool-versions') }}

      - name: Install dependencies in .tool-versions
        uses: asdf-vm/actions/install@v3

      - name: Save asdf cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: /home/runner/.asdf
          key: ${{ runner.os }}-asdf-${{ hashFiles('**/.tool-versions') }}

      - name: Test ${{ matrix.inputs.name }}
        uses: ./.github/actions/uvtest
        if: ${{ steps.changes.outputs.is_changed == 'true' }}
        with:
          name: ${{ matrix.inputs.name }}
          path: ${{ matrix.inputs.path }}
          pytest_addopts: ${{ inputs.pytest_addopts }}

      - name: Build ${{ matrix.inputs.name }}
        if: ${{ steps.changes.outputs.is_changed == 'true' }}
        run: uv build --wheel --directory ${{ matrix.inputs.path }}

      - name: Create prerelease for ${{ matrix.inputs.name }}
        if: ${{ steps.changes.outputs.is_changed == 'true' }}
        uses: ./.github/actions/create-prerelease
        with:
          name: ${{ matrix.inputs.name }}
          path: ${{ matrix.inputs.path }}
          issue-number: ${{ github.event.number }}
