name: CI orchestrator

on:
  pull_request:
    branches:
      - main
  merge_group:
    types: [checks_requested]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  checks: write
  contents: write
  id-token: write
  issues: read
  pull-requests: write

jobs:
  #
  # License and Markdown Check
  #
  ci_base:
    uses: Energinet-DataHub/.github/.github/workflows/ci-base.yml@v14
    with:
      skip_license_check: true
    secrets:
      dh3serviceaccount_privatekey: ${{ secrets.dh3serviceaccount_privatekey }}

  #
  # Detect changes to start relevant workflows. Only used for dotnet projects.
  #
  changes:
    uses: ./.github/workflows/detect-changes.yml

  #
  # Reusable CI
  #
  ci_reusable:
    uses: Energinet-DataHub/.github/.github/workflows/python-uv-ci.yml@v14
    with:
      packages_directory: source
      pytest_addopts: --ignore-glob 'tests/subsystem_tests/**' --ignore-glob 'tests/integration/**'
      create_subsystem_release: true
  ci_reusable_integration:
    uses: Energinet-DataHub/.github/.github/workflows/python-uv-ci.yml@v14
    with:
      packages_directory: source
      tests_directory: tests/integration
      create_subsystem_release: true
      environment: AzureAuth
      azure_tenant_id: ${{ vars.integration_test_azure_tenant_id }}
      azure_subscription_id: ${{ vars.integration_test_azure_subscription_id }}
      azure_spn_id: ${{ vars.integration_test_azure_spn_id_oidc }}
      azure_keyvault_url: ${{ vars.integration_test_azure_keyvault_url }}

  #
  # Dotnet CI
  #
  ci_dotnet:
    needs: changes
    if: ${{ needs.changes.outputs.dotnet == 'true' }}
    uses: ./.github/workflows/ci-dotnet.yml

  #
  # NuGet package publish
  #
  ci_packages:
    needs: changes
    if: ${{ needs.changes.outputs.nuget-packages == 'true' }}
    uses: ./.github/workflows/measurements-client-bundle-publish.yml

  #
  # Branch policy status check
  #
  allow_merge_ci_orchestrator:
    runs-on: ubuntu-latest
    needs: [ci_base, ci_reusable, ci_dotnet]
    if: |
      always()
    steps:
      - name: Verify if merge is allowed
        run: |
          echo "${{ toJSON(needs) }}"
          if [[ ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }} = true ]]; then
              echo "Failed"
              exit 1
          fi
